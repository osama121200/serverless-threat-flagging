provider "aws" {
  region = var.aws_region
}

resource "random_id" "suffix" {
  byte_length = 4
}

resource "aws_s3_bucket" "input_bucket" {
  bucket        = "${var.project_prefix}-input-${random_id.suffix.hex}"
  force_destroy = true
}

resource "aws_s3_bucket" "quarantine_bucket" {
  bucket        = "${var.project_prefix}-quarantine-${random_id.suffix.hex}"
  force_destroy = true
}

resource "aws_iam_role" "lambda_exec_role" {
  name = "lambda_exec_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Principal = {
        Service = "lambda.amazonaws.com"
      },
      Effect = "Allow",
      Sid = ""
    }]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_lambda_function" "processor_lambda" {
  function_name = var.lambda_function_name
  runtime       = "python3.12"
  handler       = "main.lambda_handler"
  role          = aws_iam_role.lambda_exec_role.arn
  filename      = "C:/terraform/Lambdafunction/lambda.zip"
  source_code_hash = filebase64sha256("C:/terraform/Lambdafunction/lambda.zip")

  environment {
  variables = {
    QUARANTINE_BUCKET = aws_s3_bucket.quarantine_bucket.bucket
    DYNAMODB_TABLE    = aws_dynamodb_table.file_log.name
    SNS_TOPIC_ARN     = aws_sns_topic.suspicious_alerts.arn
  }
 }
}

resource "aws_lambda_permission" "allow_s3" {
  statement_id  = "AllowExecutionFromS3"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.processor_lambda.function_name
  principal     = "s3.amazonaws.com"
  source_arn    = "arn:aws:s3:::silent-scalper-input-091ac445"
}

resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = aws_s3_bucket.input_bucket.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.processor_lambda.arn
    events              = ["s3:ObjectCreated:*"]
    # No filter = all files (images, text, json, etc.)
  }

  depends_on = [aws_lambda_permission.allow_s3]
}

resource "aws_dynamodb_table" "file_log" {
  name           = "${var.project_prefix}-file-log"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "file_name"

  attribute {
    name = "file_name"
    type = "S"
  }

  tags = {
    Name        = "File Processing Log"
    Environment = var.environment
  }
}

resource "aws_iam_policy" "lambda_dynamodb_policy" {
  name = "${var.project_prefix}-lambda-dynamodb-policy"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "dynamodb:PutItem"
        ],
        Resource = aws_dynamodb_table.file_log.arn
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_attach_dynamodb" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.lambda_dynamodb_policy.arn
}

resource "aws_sns_topic" "suspicious_alerts" {
  name = "${var.project_prefix}-suspicious-alerts"
}

resource "aws_iam_role_policy_attachment" "lambda_attach_sns" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
}

resource "aws_iam_policy" "lambda_s3_access_policy" {
  name = "${var.project_prefix}-lambda-s3-access"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        Resource = [
          "${aws_s3_bucket.input_bucket.arn}/*",
          "${aws_s3_bucket.quarantine_bucket.arn}/*"
        ]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_s3_custom_policy_attach" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.lambda_s3_access_policy.arn
}

resource "aws_apigatewayv2_api" "lambda_api" {
  name          = "${var.project_prefix}-api"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_integration" "lambda_integration" {
  api_id             = aws_apigatewayv2_api.lambda_api.id
  integration_type   = "AWS_PROXY"
  integration_uri    = aws_lambda_function.processor_lambda.invoke_arn
  integration_method = "POST"
  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_route" "lambda_route" {
  api_id    = aws_apigatewayv2_api.lambda_api.id
  route_key = "POST /trigger"
  target    = "integrations/${aws_apigatewayv2_integration.lambda_integration.id}"
}

resource "aws_apigatewayv2_stage" "api_stage" {
  api_id      = aws_apigatewayv2_api.lambda_api.id
  name        = "prod"
  auto_deploy = true
}

resource "aws_lambda_permission" "api_gw_invoke" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.processor_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.lambda_api.execution_arn}/*/*"
}
